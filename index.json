[{"authors":["Bo Sun(co-first)","Pietro E. Cippà(co-first)","Jing Liu","Liang Chen","Maarten Naesens","Andrew P. McMahon"],"categories":null,"content":"Highlight\nIn this research, I applied a Linear Mixed Model to achieve variance decomposition, which is pretty interesting. It helps us distinguish between genes that are explained more by confounding variables like sex, immune reponse, from the real signals that are explained by injury stage.\n","date":1541055600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1541055600,"objectID":"9d2eee6b7503126c1aa46850891f752d","permalink":"https://bsunfullsite.github.io/publication/kidney-implant-monocle-lmm/","publishdate":"2018-11-01T00:00:00-07:00","relpermalink":"/publication/kidney-implant-monocle-lmm/","section":"publication","summary":"We investigated a complex clinical condition applying an unsupervised computational strategy, which integrates genome-wide expression analysis in heterogeneous groups of patients to identify and characterize shared trajectories of disease progression. The integration of multiple transcriptomes from serial biopsies with advanced computational algorithms overcame the analytical hurdles related to variability between individuals and identified shared transcriptional elements of kidney disease progression in humans, which may prove as useful predictors of disease progression following kidney transplantation and kidney injury. This generally applicable approach opens the way for an unbiased analysis of human disease progression.","tags":["R","research","Shiny"],"title":"Transcriptional trajectories of human kidney injury progression","type":"publication"},{"authors":null,"categories":null,"content":" Coming soon. I\u0026rsquo;m currently taking the course Deep Learning with PyTorch on edX.\nTutorial will be created when I finished the course and get spare time.\n","date":1540018800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1540018800,"objectID":"6ac91b155f4fb0b5a8ee13dbd361bd0a","permalink":"https://bsunfullsite.github.io/tutorial/pytorch/","publishdate":"2018-10-20T00:00:00-07:00","relpermalink":"/tutorial/pytorch/","section":"tutorial","summary":"Coming soon. I\u0026rsquo;m currently taking the course Deep Learning with PyTorch on edX.\nTutorial will be created when I finished the course and get spare time.","tags":null,"title":"Deep Learning with PyTorch","type":"docs"},{"authors":null,"categories":null,"content":" Hugo is a framework for building websites, technically speaking, building static pages. You could build your own website with the only prerequisite of some command line and start writing immediately with markdown.\nStep 0. Install Homebrew If you have a Mac but not using Homebrew, you definitely have to try this package manager. And we will need it to install Hugo anyway.\nUse the following command to install Homebrew:\n\u0026gt; /usr/bin/ruby -e \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u0026quot; \u0026gt; brew --version # check installation  Step 1. Install Hugo If you have installed Homebrew successfully, then you could have Hugo installed in one line:\n\u0026gt; brew install hugo \u0026gt; hugo help # you are good to go!  For users of other OS If you are not using macOS, you need to check more complete instructions at Install Hugo.\nStep 2. Create a new site \u0026gt; hugo new site /@path/your-new-site  The above will create a folder named your-new-site in your designated @path. And it will be the root of your newly created Hugo web application.\nStep 3. Add a theme Being one of the most popular open-source framework for building websites, Hugo has a large and responsive community producing cool themes. Complete list of available themes can be found here.\nFrom the root of you Hugo site:\n\u0026gt; cd @your-new-site \u0026gt; git init \u0026gt; # add as submodule your favorite theme into `themes/@your-theme`: \u0026gt; git submodule add https://github.com/@author/@your-theme.git themes/@your-theme \u0026gt; # example \u0026gt; # git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke \u0026gt; # Generate site files into public directory \u0026gt; hugo -t @your-theme  See also Hugo\u0026rsquo;s Quick Start.\nStep 4. Start writing Congratulations, your first blog post is only one stone\u0026rsquo;s throw from here!\nCreating Posts Posts should generally go under a content/blog directory. Simply run:\n\u0026gt; hugo new blog/your-new-post.md  the above will create your-new-post.md under content/blog/, as well as the content/blog/ directory itself if not exist.\nFor posts to be displayed on your site, you could do one of the following: * add draft = false in the post’s front matter * or use the --buildDrafts option when building * or add builddrafts = true in config.toml.\nCreating Fixed Pages Fixed pages such as an About page should preferably go under content/fixed or be present at the root of the content directory(my preferable way).\n\u0026gt; hugo new about.md  The static pages you are going to build is genuinely text-based and the only tool you need to grab is the markdown makeup language.\nStep 5 - Infinity. Have fun playing with it. The best approach to learn something is to play with it. Actually I build this site as a 2018 birthday gift to myself.\nRecommended starting point:\n Hugo docs. Hugo 中文文档 Hugo 从入门到会用  ","date":1540018800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1540018800,"objectID":"731cf7a4d16768238a85a68d8a922a25","permalink":"https://bsunfullsite.github.io/tutorial/create-hugo/","publishdate":"2018-10-20T00:00:00-07:00","relpermalink":"/tutorial/create-hugo/","section":"tutorial","summary":"Hugo is a framework for building websites, technically speaking, building static pages. You could build your own website with the only prerequisite of some command line and start writing immediately with markdown. Step 0. Install Homebrew If you have a Mac but not using Homebrew, you definitely have to try this package manager. And we will need it to install Hugo anyway. Use the following command to install Homebrew: \u0026gt;","tags":null,"title":"Create your own website with HUGO","type":"docs"},{"authors":null,"categories":null,"content":" Deploy on Netlify steps Deploy your HUGO website on Netlify is astonishingly easy, if you are a beginner, it is recommended to use this approach.\nNetlify is free and provides fast global access, automated deployment when you add or modify content, and one-click HTTPS security. Netlify free account will create a non-sense domain for your website, to deploy, simply:\n Create a Netlify account create a repository on Github(Netlify also support other providers)for you finished website Log-in Netlify and then click New site from git and follow click-and-confirm instructions from Netlify Wait a couple minutes, and you are good to go.  Deploy on GitHub Pages Acknowledgement: This post is a direct reproduction of whipperstacker\u0026rsquo;s blog.\nI found it extremely useful when it comes to deploy your Hugo sites on Github pages. It nails it perfectly!\nLet\u0026rsquo;s get Started! If you already know how to use Hugo, and you\u0026rsquo;ve never used GitHub Pages before, and you just want to figure out how to get everything wired up and deployed with the least amount of fuss necessary, then a lot of the blog posts and tutorials you\u0026rsquo;ll find are going to be a bit frustrating.\nSome tutorials will explain the GitHub Pages part in detail, but will make assumptions about how you\u0026rsquo;re generating your site, which won\u0026rsquo;t necessarily match what Hugo does.\nOther tutorials will assume that you know nothing, and will explain every step of everything from scratch.\nThis post assumes that you know what all the pieces are (hugo, repositories, a bit of DNS), and you just want to figure out the easiest way to stitch it all together.\nFirst, a warning:\nDon\u0026rsquo;t Make a gh-pages Branch A lot of the documentation you\u0026rsquo;ll find will talk about creating a branch called gh-pages for the HTML. This is great if you\u0026rsquo;re creating a portfolio site with sub-sites for different projects on GitHub.\nIf you\u0026rsquo;re looking to create a stand-alone site mapped to a custom domain, then that is not the documentation you need.\nThe gh-pages branches are what GitHub refers to as Project Pages. What you need when creating a stand-alone site are User Pages or Organization Pages (which are the same thing, it just depends on if your GitHub user is a user or an organization).\nOk, moving on.\nA Tale of Two Repositories The trick to deploying a stand-alone, hugo-generated site that will be hosted on a custom domain is that everything within public/ needs to be in its own repository, and that repository must be named \u0026lt;username\u0026gt;.github.io, where \u0026lt;username\u0026gt; is your actual GitHub username.\nThis means that all the markdown and templates and configuration needs to go in a separate repository. The repository with all the Hugo stuff can be named whatever you like. For the sake of argument, let\u0026rsquo;s assume this repository is called blog.\nThe initial setup depends on what your current situation is. Most likely, either:\n nothing is committed to source control yet, or you already have your hugo site committed and pushed up to the blog repository on GitHub.  Setup When Nothing is Committed(select one of this two) Create two new, empty repositories on GitHub:\n blog \u0026lt;username\u0026gt;.github.io Make sure to check the Initialize this repository with a README box, since that will make the next step easier.  Kill your hugo server so that it stops regenerating the HTML.\nDelete the public/ directory with rm -r public/.\nInitialize a git repository and add the remote:\n$ git init $ git remote add origin git@github.com:\u0026lt;username\u0026gt;/blog.git  Setup When You\u0026rsquo;ve Already Committed and Pushed(select one of this two) If you\u0026rsquo;ve already got your Hugo site committed to source control and pushed up to GitHub, then the process is similar, except that you need to make room for the submodule that you\u0026rsquo;re going to add right after the setup is complete.\nKill your hugo server so that it stops regenerating the HTML.\nCreate a new, empty repository named \u0026lt;username\u0026gt;.github.io on GitHub, making sure to tick the Initialize this repository with a README box.\nDelete the public/ directory from git:\n$ git rm -r public  Adding the Submodule Clone the \u0026lt;username\u0026gt;.github.io repo into a submodule in public:\n$ git submodule add git@github.com:\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io.git public  Add everything and push it up to GitHub:\n$ git add . $ git push -u origin master  Deploying Regenerate the HTML and push the submodule up to GitHub:\n$ hugo -t -theme=YOURTHEME $ cd public $ git add . $ git commit -m \u0026quot;Generate site\u0026quot; $ git push origin master  You should be able to see the index page up on .github.io a few moments later.\nAdd a handy deploy script like Spencer Lyon\u0026rsquo;s script to simplify things a bit.\nMake the whole deploying-procedure a shell script #!/bin/bash echo -e \u0026quot;\\033[0;32mDeploying updates to GitHub...\\033[0m\u0026quot; # Build the project. hugo -t cocoa-eh # if using a theme, replace with `hugo -t \u0026lt;YOURTHEME\u0026gt;` # Go To Public folder cd public # Add changes to git. git add . # Commit changes. msg=\u0026quot;rebuilding site `date`\u0026quot; if [ $# -eq 1 ] then msg=\u0026quot;$1\u0026quot; fi git commit -m \u0026quot;$msg\u0026quot; # Push source and build repos. git push origin master # Come Back up to the Project Root cd ..  Save the above content to a file like deploy.sh. And when you build your site to remote site, call sh deploy.sh and git add, commit and push if you also want to commit the changes of your site source files.\nMapping a Custom Domain Whether you\u0026rsquo;re going to use a subdomain like blog.yoursite.com or an apex domain like yoursite.com, you need to first add a file named CNAME to the submodule repository containing the domain you\u0026rsquo;re mapping to.\nNote that this file should be named CNAME, even if the DNS record you\u0026rsquo;re creating is an A record or ALIAS record rather than a CNAME record.\nIf you\u0026rsquo;re mapping a subdomain, create a CNAME record with your DNS provider. For an apex domain you\u0026rsquo;ll need either an ALIAS record on an A record. It depends on the provider.\nFor more information about DNS mappings, check out the guide on GitHub.\nRegenerating All the URLS Once the DNS has propagated you\u0026rsquo;re going to need to change the base host name in the Hugo config file, regenerate the site with the correct urls, and redeploy.\n","date":1540018800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1540018800,"objectID":"1f085ef4df5182ad4f6d0c47fbacab04","permalink":"https://bsunfullsite.github.io/tutorial/deploy-hugo/","publishdate":"2018-10-20T00:00:00-07:00","relpermalink":"/tutorial/deploy-hugo/","section":"tutorial","summary":"Deploy on Netlify steps Deploy your HUGO website on Netlify is astonishingly easy, if you are a beginner, it is recommended to use this approach.\nNetlify is free and provides fast global access, automated deployment when you add or modify content, and one-click HTTPS security. Netlify free account will create a non-sense domain for your website, to deploy, simply:\n Create a Netlify account create a repository on Github(Netlify also support other providers)for you finished website Log-in Netlify and then click New site from git and follow click-and-confirm instructions from Netlify Wait a couple minutes, and you are good to go.","tags":null,"title":"Deploy your HUGO website online","type":"docs"},{"authors":null,"categories":["R"],"content":"[image] # Caption (optional) caption = “Image credit: Unsplash”\n# Focal point (optional) # Options: Smart, Center, TopLeft, Top, TopRight, Left, Right, BottomLeft, Bottom, BottomRight focal_point = “”\nDependency This post demonstrate the following:\n Quantile Normalization implemented in R package preprocessCore. Inverse-Normal-Transform implemented in RNOmni  source(\u0026quot;http://www.bioconductor.org/biocLite.R\u0026quot;) biocLite(\u0026quot;preprocessCore\u0026quot;) install.packages(\u0026quot;RNOmni\u0026quot;) library(preprocessCore) library(RNOmni)  General Princinples Quantile Normalization Simplest way to put it: Quantile normalization is a technique for making different distributions have the same statistical property by “aligning”\u0026quot; their quantiles. Statquest has a good video explaining this technique. Here is the video:    Inverse-Normal-Transform Inverse normal transformation, a.k.a ranked based Inverse-Normal-Transformation(INT), is a theoretically complicated method. But again, the simplest way to put it: INT increase the “normality” of the distribution, by aligning the quantiles to the standard normal quantiles. As a result we can now apply statistal models that have a normality assumption.\n Be Cautious! Normalization techeniques are highly application specific. Blindly appling them may create as many problems as they solve. If you don’t know the “right”\u0026quot; one to use, you’d better do some test-ride and select the one that is statistically better(e.g. Cross-Validation, etc.).\n  Set plot parameters library(RColorBrewer) qual_col_pals = brewer.pal.info[brewer.pal.info$category == \u0026#39;qual\u0026#39;,] col_vec = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))) # 74 colors in RcolorBrewer  Load Data The data in this post is a data.frame where rows are genes and columns are patients, the measurement is \\(log_2(rpkm + 1)\\). It’s straghtforward to understand so I’d rather not to bother to provide a link for it.\ndata = read.csv(\u0026quot;/Users/bos/R-workspace/2.eQTL/large500_expr\u0026quot;) expr = as.matrix(data[,-1]) # 1st column is gene id  Quantile Transformation before quantile transformation plot(density(unlist(expr[, 1])), col=col_vec[1]) for(i in 2:40) lines(density(expr[,i]), col=col_vec[i])  after quantile transformation expr.qt \u0026lt;- preprocessCore::normalize.quantiles(as.matrix(expr)) plot(density(expr.qt[,1]), col = col_vec[1]) for(i in 2:40) lines(density(expr.qt[,i]), col=col_vec[i]) Note here most part of those transformed distributions land on top of each other, but if the variability is larger in your data, then near the tail the distributions will not be perfectly same which is good because it keeps the variability.\nHowever, Quantile Normalization can not remove batch effect, see Jeff’s post\n  Inverse-Normal-Transformation before plot(density(expr[1,]), col = col_vec[1]) for(i in 2:40) lines(density(expr[i, ]), col = col_vec[i])  After expr.int = t(apply(expr, 1, RNOmni::rankNormal)) plot(density(expr.int[1,]), col = col_vec[1]) for(i in 2:40) lines(density(expr.int[i, ]), col = col_vec[i]) As you can see, the distribution are normalized toward std. normal, and variability of the tails are preserved.(You may expect a different result with this plot, because my data here is RNA-seq data with heavy-tails, for moderate-tailed data, it should become more similar to a std. normal. )\n  Session Information if (!requireNamespace(\u0026quot;devtools\u0026quot;)) install.packages(\u0026quot;devtools\u0026quot;) ## Loading required namespace: devtools devtools::session_info() ## Session info ------------------------------------------------------------- ## setting value ## version R version 3.5.0 (2018-04-23) ## system x86_64, darwin15.6.0 ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## tz America/Los_Angeles ## date 2018-10-20 ## Packages ----------------------------------------------------------------- ## package * version date source ## abind 1.4-5 2016-07-21 CRAN (R 3.5.0) ## backports 1.1.2 2017-12-13 CRAN (R 3.5.0) ## base * 3.5.0 2018-04-24 local ## blogdown 0.8 2018-07-15 CRAN (R 3.5.0) ## bookdown 0.7 2018-02-18 CRAN (R 3.5.0) ## codetools 0.2-15 2016-10-05 CRAN (R 3.5.0) ## compiler 3.5.0 2018-04-24 local ## datasets * 3.5.0 2018-04-24 local ## devtools 1.13.6 2018-06-27 CRAN (R 3.5.0) ## digest 0.6.15 2018-01-28 CRAN (R 3.5.0) ## evaluate 0.11 2018-07-17 CRAN (R 3.5.0) ## foreach 1.4.4 2017-12-12 CRAN (R 3.5.0) ## graphics * 3.5.0 2018-04-24 local ## grDevices * 3.5.0 2018-04-24 local ## htmltools 0.3.6 2017-04-28 CRAN (R 3.5.0) ## iterators 1.0.10 2018-07-13 CRAN (R 3.5.0) ## knitr 1.20 2018-02-20 CRAN (R 3.5.0) ## magrittr 1.5 2014-11-22 CRAN (R 3.5.0) ## memoise 1.1.0 2017-04-21 CRAN (R 3.5.0) ## methods * 3.5.0 2018-04-24 local ## plyr 1.8.4 2016-06-08 CRAN (R 3.5.0) ## preprocessCore * 1.42.0 2018-05-01 Bioconductor ## RColorBrewer * 1.1-2 2014-12-07 CRAN (R 3.5.0) ## Rcpp 0.12.18 2018-07-23 cran (@0.12.18) ## rmarkdown 1.10 2018-06-11 CRAN (R 3.5.0) ## RNOmni * 0.4.0 2018-05-16 CRAN (R 3.5.0) ## rprojroot 1.3-2 2018-01-03 CRAN (R 3.5.0) ## stats * 3.5.0 2018-04-24 local ## stringi 1.2.4 2018-07-20 CRAN (R 3.5.0) ## stringr 1.3.1 2018-05-10 CRAN (R 3.5.0) ## tools 3.5.0 2018-04-24 local ## utils * 3.5.0 2018-04-24 local ## withr 2.1.2 2018-03-15 CRAN (R 3.5.0) ## xfun 0.3 2018-07-06 CRAN (R 3.5.0) ## yaml 2.2.0 2018-07-25 CRAN (R 3.5.0)  ","date":1539993600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1539993600,"objectID":"3882cda8bf5170b0e304427ea3dadf6a","permalink":"https://bsunfullsite.github.io/post/quantile-nomrlization-and-inverse-normal-transform/quantile-normalization-and-inverse-normal-transform/","publishdate":"2018-10-20T00:00:00Z","relpermalink":"/post/quantile-nomrlization-and-inverse-normal-transform/quantile-normalization-and-inverse-normal-transform/","section":"post","summary":"[image] # Caption (optional) caption = “Image credit: Unsplash”\n# Focal point (optional) # Options: Smart, Center, TopLeft, Top, TopRight, Left, Right, BottomLeft, Bottom, BottomRight focal_point = “”\nDependency This post demonstrate the following:\n Quantile Normalization implemented in R package preprocessCore. Inverse-Normal-Transform implemented in RNOmni  source(\u0026quot;http://www.bioconductor.org/biocLite.R\u0026quot;) biocLite(\u0026quot;preprocessCore\u0026quot;) install.packages(\u0026quot;RNOmni\u0026quot;) library(preprocessCore) library(RNOmni)  General Princinples Quantile Normalization Simplest way to put it: Quantile normalization is a technique for making different distributions have the same statistical property by “aligning”\u0026quot; their quantiles.","tags":["modeling","plot","R","statistics"],"title":"Quantile Normalization and Inverse Normal Transform","type":"post"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1537772400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1537772400,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"https://bsunfullsite.github.io/project/internal-project/","publishdate":"2018-09-24T00:00:00-07:00","relpermalink":"/project/internal-project/","section":"project","summary":"Python script that take a video as input and output a video that are made of symbols and characters!","tags":["python","fun"],"title":"Fun video transformer in Python","type":"project"},{"authors":["Pietro Cippa, Jing Liu, Bo Sun, Sanjeev Kumar, Maarten Naesens, Andrew P McMahon"],"categories":null,"content":"I\u0026rsquo;m second author in this paper. Primarily responsible for some data EDA and heatmap visualizations.\n","date":1528441200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1528441200,"objectID":"28dcb26b45677457b7cdc49f8394b6b4","permalink":"https://bsunfullsite.github.io/publication/b-cell-second-author/","publishdate":"2018-06-08T00:00:00-07:00","relpermalink":"/publication/b-cell-second-author/","section":"publication","summary":"The mechanisms initiating the late immune response to allografts are poorly understood. Through transcriptome analysis of serial protocol biopsies in kidney transplant recipients, we found a tight correlation between the initial response to kidney injury and a late B lymphocyte signature associated with renal dysfunction and fibrosis, suggesting a link between dysfunctional repair and immunoreactivity. To specifically investigate the immunological consequences of dysfunctional repair, we followed the mouse kidney up to 18 months after ischemia/reperfusion. Even in the absence of foreign antigens we identified a sustained immune response in conjunction with the transition to chronic kidney damage. This tissue-driven immunological process involved both the innate and the adaptive immune system and eventually induced an antigen-driven proliferation, selection and maturation of B lymphocytes into broadly-reacting antibody secreting cells. These findings reveal an unappreciated role of dysfunctional tissue repair on local immunoregulation with a particular relevance for late transplantation immunobiology.","tags":["R","research"],"title":"Late B lymphocyte action in dysfunctional tissue repair following kidney injury and transplantation","type":"publication"},{"authors":null,"categories":null,"content":"","date":1511424000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1511424000,"objectID":"29b21731ef67aa292b471e95ad5738d7","permalink":"https://bsunfullsite.github.io/project/gitbook-example/","publishdate":"2017-11-23T00:00:00-08:00","relpermalink":"/project/gitbook-example/","section":"project","summary":"A full scientific report with R markdown, formatted as `gitbook`.","tags":["R","research"],"title":"Gitbook example","type":"project"},{"authors":null,"categories":null,"content":"","date":1461740400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461740400,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://bsunfullsite.github.io/project/external-project/","publishdate":"2016-04-27T00:00:00-07:00","relpermalink":"/project/external-project/","section":"project","summary":"I created this R Shiny App to supplement my this [publication](asd). It pre-loads tens of thousands genes(take a few seconds) and support fuzz search. Researcher could investigate the gene expression in this kidney injury setting changes by interactive scatter plot and heatmap. Click `draw plot` to go!","tags":["R","Shiny","research"],"title":"Gene Viz 1.0(R Shiny Dashboard)","type":"project"},{"authors":[],"categories":null,"content":" Academic makes it easy to create a beautiful website for free using Markdown. Customize anything on your site with widgets, themes, and language packs.\nFollow our easy step by step guide to learn how to build your own free website with Academic. Check out the personal demo or the business demo of what you\u0026rsquo;ll get in less than 10 minutes.\n View the documentation Ask a question Request a feature or report a bug Updating? View the Update Guide and Release Notes Support development of Academic:  Donate a coffee Decorate your laptop or journal with an Academic sticker Wear the T-shirt   \nKey features:\n Easily manage various content including homepage, blog posts, publications, talks, and projects Extensible via color themes and widgets/plugins Write in Markdown for easy formatting and code highlighting, with LaTeX for mathematical expressions Social/academic network linking, Google Analytics, and Disqus comments Responsive and mobile friendly Simple and refreshing one page design Multilingual and easy to customize  Color Themes Academic is available in different color themes and font themes.\n       Install You can choose from one of the following four methods to install:\n one-click install using your web browser (recommended) install on your computer using Git with the Command Prompt/Terminal app install on your computer by downloading the ZIP files install on your computer with RStudio  Quick install using your web browser  Install Academic with Netlify  Netlify will provide you with a customizable URL to access your new site  On GitHub, go to your newly created academic-kickstart repository and edit config.toml to personalize your site. Shortly after saving the file, your site will automatically update Read the Quick Start Guide to learn how to add Markdown content. For inspiration, refer to the Markdown content which powers the Demo  Install with Git Prerequisites:\n Download and install Git Download and install Hugo   Fork the Academic Kickstart repository and clone your fork with Git:\ngit clone https://github.com/sourcethemes/academic-kickstart.git My_Website  Note that if you forked Academic Kickstart, the above command should be edited to clone your fork, i.e. replace sourcethemes with your GitHub username.\n Initialize the theme:\ncd My_Website git submodule update --init --recursive   Install with ZIP  Download and extract Academic Kickstart Download and extract the Academic theme to the themes/academic/ folder from the above step  Install with RStudio View the guide to installing Academic with RStudio\nQuick start  If you installed on your computer, view your new website by running the following command:\nhugo server  Now visit localhost:1313 and your new Academic powered website will appear. Otherwise, if using Netlify, they will provide you with your URL.\n Read the Quick Start Guide to learn how to add Markdown content, customize your site, and deploy it. For inspiration, refer to the Markdown content which powers the Demo\n Build your site by running the hugo command. Then host it for free using Github Pages or Netlify (refer to the first installation method). Alternatively, copy the generated public/ directory (by FTP, Rsync, etc.) to your production web server (such as a university\u0026rsquo;s hosting service).\n  Updating Feel free to star the project on Github to help keep track of updates and check out the release notes prior to updating your site.\nBefore updating the framework, it is recommended to make a backup of your entire website directory (or at least your themes/academic directory) and record your current version number.\nBy default, Academic is installed as a Git submodule which can be updated by running the following command:\ngit submodule update --remote --merge  Check out the update guide for full instructions and alternative methods.\nFeedback \u0026amp; Contributing Please use the issue tracker to let me know about any bugs or feature requests, or alternatively make a pull request.\nFor support, head over to the Hugo discussion forum.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1461135600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1515830400,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://bsunfullsite.github.io/post/getting-started/","publishdate":"2016-04-20T00:00:00-07:00","relpermalink":"/post/getting-started/","section":"post","summary":"Create a beautifully simple website or blog in under 10 minutes.","tags":["Hugo"],"title":"Academic: the website designer for Hugo","type":"post"},{"authors":null,"categories":["R"],"content":"R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 fit \u0026lt;- lm(dist ~ speed, data = cars) fit ## ## Call: ## lm(formula = dist ~ speed, data = cars) ## ## Coefficients: ## (Intercept) speed ## -17.579 3.932  Including Plots You can also embed plots. See Figure 1 for example:\npar(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c(\u0026#39;Sky\u0026#39;, \u0026#39;Sunny side of pyramid\u0026#39;, \u0026#39;Shady side of pyramid\u0026#39;), col = c(\u0026#39;#0292D8\u0026#39;, \u0026#39;#F7EA39\u0026#39;, \u0026#39;#C4B632\u0026#39;), init.angle = -50, border = NA )  Figure 1: A fancy pie chart.   ","date":1437703994,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1437703994,"objectID":"10065deaa3098b0da91b78b48d0efc71","permalink":"https://bsunfullsite.github.io/post/2015-07-23-r-rmarkdown/","publishdate":"2015-07-23T21:13:14-05:00","relpermalink":"/post/2015-07-23-r-rmarkdown/","section":"post","summary":"R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.","tags":["R Markdown","plot","regression"],"title":"Hello R Markdown","type":"post"},{"authors":null,"categories":null,"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c2915ec5da95791851caafdcba9664af","permalink":"https://bsunfullsite.github.io/slides/example-slides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/example-slides/","section":"slides","summary":"Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$","tags":null,"title":"Slides","type":"slides"}]